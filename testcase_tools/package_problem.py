from testcase_tools.misc import *

import zipfile
import glob
import os

#============================================================
# ZIP
#============================================================

AUTOGENERATED_BANNER_COMMENT = "# autogenerated by https://github.com/delta-cs/domjudge-testcase-tools\n"


def make_import_zip(tests_path :str, output_path :str, problem_name :str, statement_file:str=None, timelimit:int|float=None):
    verb_print(f"TASK: generate {output_path}", tcol.HEADER)

    zipf = zipfile.PyZipFile(output_path, "w")

    zipf.mkdir("data")
    zipf.mkdir("data/secret")
    zipf.mkdir("data/sample")

    #================ config files setup =============================
    problem_yaml_content = f"name: '{problem_name}\n"

    problem_ini_content = f"timelimit='{timelimit}'\n" if timelimit is not None else ""

    #------------------------------------------------------------------

    zipf.writestr("problem.yaml", AUTOGENERATED_BANNER_COMMENT + problem_yaml_content)
    zipf.writestr("domjudge-problem.ini", AUTOGENERATED_BANNER_COMMENT + problem_ini_content)

    # add problem statement file if specified
    if statement_file is not None:
        extension = statement_file[statement_file.rfind('.'):] # any extension
        zipf.write(statement_file, f"problem{extension}")


    sample_test_i = 1
    secret_test_i = 1
    # find all in files 
    for in_file in glob.glob("**/in.*", root_dir=tests_path, recursive=True):

        dir_path = os.path.join(tests_path, os.path.dirname(in_file))
        dir_name = os.path.basename(dir_path)

        # try to find matching out file in the current directory
        out_files = glob.glob("out.*", root_dir=dir_path)

        if len(out_files) != 1:
            cprint(f"Error: missing out file in {dir_path}; skipping", tcol.FAIL)
            continue
        

        is_sample = os.path.exists(os.path.join(dir_path, SAMPLE_TEST_MARKER_FILE))
        
        test_type =   'sample' if is_sample else 'secret'
        test_i = sample_test_i if is_sample else  secret_test_i

        verb_print(f"  writing {test_type} test #{test_i} ({dir_path}) .in, .ans and .desc to archive")

        zipf.write(os.path.join(tests_path, in_file), f"data/{test_type}/{test_i}.in")

        zipf.writestr(f"data/{test_type}/{test_i}.desc", dir_name)

        zipf.write(os.path.join(dir_path, out_files[0]), f"data/{test_type}/{test_i}.ans")

        if is_sample: sample_test_i += 1
        else: secret_test_i += 1

    zipf.close()
    verb_print("TASK DONE", tcol.HEADER)



